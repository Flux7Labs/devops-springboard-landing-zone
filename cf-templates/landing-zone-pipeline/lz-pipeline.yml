AWSTemplateFormatVersion: 2010-09-09
Description: "AWS DevOps Springboard - Landing Zone Pipeline"
Metadata:
    Stack: 3
    VersionDate: 2017-07-26
    Input:
      Description: "AWS Codepipeline for Cloudformation Stack Continuous Delivery"
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label:
              default: "CodePipeline Configuration"
            Parameters:
              - StackPrefix
              - NotifyEmail
          - Label:
              default: "Repository Details"
            Parameters:
              - GitUser
              - GitRepo
              - GitBranch
              - GitHubToken

Parameters:
  StackPrefix:
    Description: Stack Prefix
    Type: String
    MaxLength: 32
    AllowedPattern: '[a-z0-9\-]+'
    Default: "devops-springboard"
  GitUser:
    Description: 'User/Owner for Git repo'
    Type: String
  GitRepo:
    Description: 'Git repository name'
    Type: 'String'
  GitBranch:
    Description: 'Git Branch being deployed'
    Type: 'String'
  GitHubToken:
    Description: 'GitHub Access Token'
    Type: 'String'
    NoEcho: true
  NotifyEmail:
    Type: String
    Description: Email for  Landing Zone  Pipeline Notifications


Resources:
  LZArtifactBucket:
    Type: "AWS::S3::Bucket"

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: !Sub ${StackPrefix}-network-CF
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - '*'
                Effect: Allow
                Resource: '*'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: !Sub ${StackPrefix}-Pipeline-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'codebuild:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                - 'codecommit:BatchGetRepositories'
                - 'codecommit:Get*'
                - 'codecommit:GitPull'
                - 'codecommit:List*'
                - 'codecommit:Update*'
                - 'codecommit:Test*'
                - 'codecommit:UploadArchive'
                Effect: Allow
                Resource: '*'


  PipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Landing Zone Notifications"
      Subscription:
        - Endpoint: !Ref NotifyEmail
          Protocol: email

  PiplineCloudwatchRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Cloudwatch events rule to detect pipeline failures"
      State: "ENABLED"
      EventPattern:
        source:
        - "aws.codepipeline"
        detail-type:
        - "CodePipeline Stage Execution State Change"
        detail:
          state:
            - "FAILED"
          pipeline:
            - !Ref Pipeline
          stage:
            - FetchFromGit
            - IAMStackDeploy
            - NetworkStackDeploy
            - ClusterResourcesDeploy
            - ServiceManagerStackDeploy

      Targets:
      - Arn: !Ref PipelineSNSTopic
        Id: PipelineNoticationSNS
        InputTransformer:
          InputPathsMap:
            pipeline: $.detail.pipeline
            stage: $.detail.stage
          InputTemplate: !Sub '"The Stage <stage> in Pipeline <pipeline> has failed."'
    DependsOn: PipelineSNSTopicPolicy

  PipelineSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: TrustCWEToPublishEventsToMyTopic
          Effect: Allow
          Principal:
            Service: "events.amazonaws.com"
          Action: sns:Publish
          Resource: !Ref PipelineSNSTopic
      Topics:
      - !Ref PipelineSNSTopic

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        #EncryptionKey: !Ref KMSKeyId
        Location: !Ref LZArtifactBucket
        Type: S3
      DisableInboundStageTransitions: []
      RestartExecutionOnUpdate: true
      Name: !Sub "${StackPrefix}-lz-pipeline"
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: FetchFromGit
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitUser
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: S3Artifact
              RunOrder: '1'
        - Name: IAMStackDeploy
          Actions:
            - Name: IAMCreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S3Artifact
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-iam
                ChangeSetName: !Sub ${StackPrefix}-iam-changeset
                TemplateConfiguration:  "S3Artifact::cf-templates/iam/config_params.json"
                TemplatePath: "S3Artifact::cf-templates/iam/iam.yml"
                ParameterOverrides:
                    !Sub |
                      {
                        "StackPrefix": "${StackPrefix}"
                      }
              RunOrder: '1'
            - Name: IAMExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${StackPrefix}-iam-changeset
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-iam
              RunOrder: '3'
        - Name: NetworkStackDeploy
          Actions:
            - Name: NetworkCreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S3Artifact
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-network
                ChangeSetName: !Sub ${StackPrefix}-network-changeset
                TemplateConfiguration:  "S3Artifact::cf-templates/network/config_params.json"
                TemplatePath: "S3Artifact::cf-templates/network/network.yml"
                ParameterOverrides:
                     !Sub |
                       {
                          "StackPrefix": "${StackPrefix}"
                       }
              RunOrder: '1'
            - Name: NetworkExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${StackPrefix}-network-changeset
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-network
              RunOrder: '3'
        - Name: ClusterResourcesDeploy
          Actions:
            - Name: CreateChangeSetECSCluster
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S3Artifact
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-cluster
                ChangeSetName: !Sub ${StackPrefix}-cluster-changeset
                TemplateConfiguration:  "S3Artifact::cf-templates/ecs-cluster/config_params.json"
                TemplatePath: "S3Artifact::cf-templates/ecs-cluster/ecs.yml"
                ParameterOverrides:
                    !Sub |
                      {
                        "StackPrefix": "${StackPrefix}"
                      }
              RunOrder: '1'
            - Name: ExecuteChangeSetEcsCluster
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${StackPrefix}-cluster-changeset
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-cluster
              RunOrder: '2'
            - Name: CreateChangeSetAnchoreDB
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S3Artifact
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-anchore-db
                ChangeSetName: !Sub ${StackPrefix}-anchore-db-changeset
                TemplateConfiguration:  "S3Artifact::cf-templates/anchore-db/config_params.json"
                TemplatePath: "S3Artifact::cf-templates/anchore-db/anchore-db.yml"
                ParameterOverrides:
                    !Sub |
                      {
                        "StackPrefix": "${StackPrefix}"
                      }
              RunOrder: '1'
            - Name: ExecuteChangeSetAnchoreDB
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${StackPrefix}-anchore-db-changeset
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-anchore-db
              RunOrder: '2'
        - Name: ServiceManagerStackDeploy
          Actions:
            - Name: ServiceManagerCreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: S3Artifact
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-service-manager
                ChangeSetName: !Sub ${StackPrefix}-service-changeset
                TemplateConfiguration:  "S3Artifact::cf-templates/service-manager-pipeline/config_params.json"
                TemplatePath: "S3Artifact::cf-templates/service-manager-pipeline/service-manager.yml"
                ParameterOverrides:
                  !Sub |
                    {
                      "GitUser": "${GitUser}",
                      "PipelineIamRoleArn": "${PipelineRole.Arn}",
                      "StackPrefix": "${StackPrefix}",
                      "GitHubToken": "${GitHubToken}",
                      "PipelineSNSTopic": "${PipelineSNSTopic}"
                    }
              RunOrder: '1'
            - Name: ServiceManagerExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                Capabilities: CAPABILITY_NAMED_IAM
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub ${StackPrefix}-service-changeset
                RoleArn: !GetAtt CFNRole.Arn
                StackName: !Sub ${StackPrefix}-service-manager
              RunOrder: '3'
Outputs:
  PipelineSNSTopic:
    Description: SNS Topic for pipeline notifications
    Value: !Ref PipelineSNSTopic
    Export:
      Name: !Sub ${StackPrefix}-pipeline-sns-topic
  LandingZoneArtifactBucket:
    Description: S3 bucket to store landing zone repo artifacts
    Value: !Ref LZArtifactBucket
    Export:
      Name: !Sub ${StackPrefix}-lz-artifact-bucket
