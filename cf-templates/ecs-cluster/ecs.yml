---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying ECS cluster'
# TODO:
# 1. Create ECS cluster
# 2. Create ALB
# 3. Launch seed service

Parameters:
  ClusterName:
    Type: String
    Description: The ECS Cluster name
  StackPrefix:
    Type: String
    Description: The Stack Prefix
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
  serviceALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
      VpcId:
        Fn::ImportValue: ecs-workshop-VpcId
      GroupDescription: Service ALB SG

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${StackPrefix}-ecs-workshop-alb
      Subnets:
        - !ImportValue
            ecs-workshop-Public-Subnet-0
        - !ImportValue
            ecs-workshop-Public-Subnet-1
      #Target Groups
      SecurityGroups:
        - !Ref serviceALBSG
      Scheme: internet-facing
  
  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryPolicyText:
        Statement:
          -
            Action:
							- ecr:GetAuthorizationToken
							- ecr:BatchCheckLayerAvailability
							- ecr:GetDownloadUrlForLayer
							- ecr:GetRepositoryPolicy
							- ecr:DescribeRepositories
							- ecr:ListImages
							- ecr:BatchGetImage
							- ecr:InitiateLayerUpload
							- ecr:UploadLayerPart
							- ecr:CompleteLayerUpload
							- ecr:PutImage
            Effect: Allow
            Principal: *
        RepositoryName: ecs-workshop

               

Outputs:
  ECSLoadBalancer:
    Value: !Ref ECSLoadBalancer
    Export:
      Name:
          !Sub ${StackPrefix}-ECSLoadBalancer
